generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  phoneNumber String @unique
  pin String

  name String @default("Не указано")
  picture String @default("/uploads/no-user-image.png")

  balance Int
  cashback Int

  favorites Post[] // Связь с избранными постами

  // Связь с мойками через промежуточную таблицу
  washes WashUser[]

  @@map("user")
  PostUser PostUser[]
  Wash Wash[]
}

model Wash {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String   @default("Новая мойка") @unique
  picture   String   @default("/uploads/no-wash-image.png")

  cityId    String?  // Добавляем поле для связи с городом
  city      City?    @relation(fields: [cityId], references: [id])

  users     WashUser[]
  posts     Post[]
  stories   Story[]  // Связь с историями
  promoCodes PromoCode[]
  price     Price[]
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")

  @@map("wash")
}

model Story {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  mediaUrl    String   // URL изображения или видео
  mediaType   MediaType // Тип медиа: 'image' или 'video'
  duration    Int      // Длительность отображения (в секундах)
  washId      String   // Связь с мойкой
  wash        Wash     @relation(fields: [washId], references: [id])

  @@map("story")
}

enum MediaType {
  IMAGE
  VIDEO
}

// Промежуточная таблица для связи User и Wash
model WashUser {
  id       String @id @default(cuid())
  userId   String
  washId   String
  balance  Int
  bonus    Int

  user     User  @relation(fields: [userId], references: [id])
  wash     Wash  @relation(fields: [washId], references: [id])

  @@unique([userId, washId]) // Добавляем составной ключ

  @@map("wash_user")
}

model Post {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  address String
  description String
  shedule String
  lat Float
  lon Float
  box Int

  washId String
  wash Wash @relation(fields: [washId], references: [id])

  @@map("post")
  User User[] // Обратная связь с пользователями
  PostUser PostUser[]
}

// Промежуточная таблица для связи User и Post
model PostUser {
  id String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("post_user")
}

model PromoCode {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  endTime DateTime
  nominal Int

  washId String
  wash Wash @relation(fields: [washId], references: [id])

  @@map("promo_code")
}

model Price {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  serviceName String
  price Int

  washId String
  wash Wash @relation(fields: [washId], references: [id])

  @@map("price")
}

model City {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  washes    Wash[]   // Связь с мойками

  @@map("city")
}
